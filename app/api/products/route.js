// app/api/products/route.js
import { NextResponse } from "next/server";
import dbConnect from "@/lib/mongodb";
import productModel from "@/lib/models/Product";
import { v2 as cloudinary } from "cloudinary";

// Cloudinary config
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export async function POST(request) {
  try {
    await dbConnect();

    const formData = await request.formData();

    const name = formData.get("name");
    const description = formData.get("description") || "";
    const brand = formData.get("brand");
    const price = parseFloat(formData.get("price")) || 0;
    const image = formData.get("image");
    const category = formData.get("category") || "";
    const stock = parseInt(formData.get("stock")) || 0;
    const color = formData.get("color");

    // Basic validation
    if (!name) {
      return NextResponse.json(
        { error: "Product name is required" },
        { status: 400 }
      );
    }

    // Upload image to Cloudinary
    let imageUrl = "";

    // Handle image upload via Cloudinary
    if (image && image instanceof File) {
      try {
        // Convert file to base64 string for Cloudinary upload
        const bytes = await image.arrayBuffer();
        const buffer = Buffer.from(bytes);
        const base64String = `data:${image.type};base64,${buffer.toString(
          "base64"
        )}`;

        // Upload to Cloudinary
        const uploadResult = await new Promise((resolve, reject) => {
          cloudinary.uploader.upload(
            base64String,
            {
              folder: "ecommerce-products", // Changed from 'ecommerce-categories' to 'ecommerce-products'
              resource_type: "image",
            },
            (error, result) => {
              if (error) {
                console.error("Cloudinary upload error:", error);
                reject(error);
              } else {
                console.log("Cloudinary upload success");
                resolve(result);
              }
            }
          );
        });

        // Use the secure URL from Cloudinary
        imageUrl = uploadResult.secure_url;
      } catch (uploadError) {
        console.error("Error uploading image to Cloudinary:", uploadError);
        return NextResponse.json(
          { error: "Failed to upload image", message: uploadError.message },
          { status: 500 }
        );
      }
    } else {
      return NextResponse.json(
        { error: "Product image is required" },
        { status: 400 }
      );
    }

    // Prepare product data - slug will be auto-generated by the model's pre-save hook
    const productData = {
      name,
      description,
      brand,
      price,
      image: imageUrl,
      category,
      stock,
      color,
    };

    // Save to database
    const newProduct = await productModel.create(productData);

    return NextResponse.json(newProduct, { status: 201 });
  } catch (error) {
    console.error("Error creating product:", error);
    
    // Special handling for duplicate key errors
    if (error.code === 11000) {
      return NextResponse.json(
        { 
          error: "Product with this name already exists", 
          message: "Please use a different product name" 
        },
        { status: 409 } // Conflict status code
      );
    }
    
    return NextResponse.json(
      { error: "Failed to create product", message: error.message },
      { status: 500 }
    );
  }
}

export async function GET(request) {
  try {
    await dbConnect();

    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get("page")) || 1;
    const limit = parseInt(searchParams.get("limit")) || 10;
    const search = searchParams.get("search") || "";

    const skip = (page - 1) * limit;

    // Build query for search
    const query = search ? { name: { $regex: search, $options: "i" } } : {};

    // Get products with category population and total count
    const [products, total] = await Promise.all([
      productModel
        .find(query)
        .populate("category", "name")
        .skip(skip)
        .limit(limit),
      productModel.countDocuments(query),
    ]);

    return NextResponse.json({
      products,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
    });
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to fetch products: " + error.message },
      { status: 500 }
    );
  }
}
